// Mocks generated by Mockito 5.4.6 from annotations
// in attendance_tracker/test/unit/providers/student_provider_cache_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:attendance_tracker/models/models.dart' as _i4;
import 'package:attendance_tracker/repositories/student_repository.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [StudentRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockStudentRepository extends _i1.Mock implements _i2.StudentRepository {
  MockStudentRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Student>> getStudentsByClassId(int? classId) =>
      (super.noSuchMethod(
            Invocation.method(#getStudentsByClassId, [classId]),
            returnValue: _i3.Future<List<_i4.Student>>.value(<_i4.Student>[]),
          )
          as _i3.Future<List<_i4.Student>>);

  @override
  _i3.Future<List<_i4.Student>> getStudentsWithAttendanceStats(int? classId) =>
      (super.noSuchMethod(
            Invocation.method(#getStudentsWithAttendanceStats, [classId]),
            returnValue: _i3.Future<List<_i4.Student>>.value(<_i4.Student>[]),
          )
          as _i3.Future<List<_i4.Student>>);

  @override
  _i3.Future<_i4.Student?> getStudentById(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getStudentById, [id]),
            returnValue: _i3.Future<_i4.Student?>.value(),
          )
          as _i3.Future<_i4.Student?>);

  @override
  _i3.Future<_i4.Student?> createStudent(
    int? classId,
    String? name,
    String? rollNumber,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createStudent, [classId, name, rollNumber]),
            returnValue: _i3.Future<_i4.Student?>.value(),
          )
          as _i3.Future<_i4.Student?>);

  @override
  _i3.Future<bool> updateStudent(_i4.Student? student) =>
      (super.noSuchMethod(
            Invocation.method(#updateStudent, [student]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> deleteStudent(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteStudent, [id]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);
}
