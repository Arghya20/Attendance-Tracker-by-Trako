// Mocks generated by Mockito 5.4.6 from annotations
// in attendance_tracker/test/widget/class_detail_screen_refresh_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i5;

import 'package:attendance_tracker/models/models.dart' as _i3;
import 'package:attendance_tracker/providers/attendance_provider.dart' as _i7;
import 'package:attendance_tracker/providers/class_provider.dart' as _i2;
import 'package:attendance_tracker/providers/student_provider.dart' as _i6;
import 'package:attendance_tracker/services/navigation_service.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ClassProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockClassProvider extends _i1.Mock implements _i2.ClassProvider {
  MockClassProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.Class> get classes =>
      (super.noSuchMethod(
            Invocation.getter(#classes),
            returnValue: <_i3.Class>[],
          )
          as List<_i3.Class>);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> loadClasses() =>
      (super.noSuchMethod(
            Invocation.method(#loadClasses, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> forceLoadClasses() =>
      (super.noSuchMethod(
            Invocation.method(#forceLoadClasses, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> selectClass(int? classId) =>
      (super.noSuchMethod(
            Invocation.method(#selectClass, [classId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> addClass(String? name) =>
      (super.noSuchMethod(
            Invocation.method(#addClass, [name]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> updateClass(_i3.Class? classModel) =>
      (super.noSuchMethod(
            Invocation.method(#updateClass, [classModel]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> deleteClass(int? classId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteClass, [classId]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  void clearError() => super.noSuchMethod(
    Invocation.method(#clearError, []),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<bool> pinClass(int? classId) =>
      (super.noSuchMethod(
            Invocation.method(#pinClass, [classId]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> unpinClass(int? classId) =>
      (super.noSuchMethod(
            Invocation.method(#unpinClass, [classId]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> togglePinStatus(int? classId) =>
      (super.noSuchMethod(
            Invocation.method(#togglePinStatus, [classId]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  void clearCache() => super.noSuchMethod(
    Invocation.method(#clearCache, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [StudentProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockStudentProvider extends _i1.Mock implements _i6.StudentProvider {
  MockStudentProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.Student> get students =>
      (super.noSuchMethod(
            Invocation.getter(#students),
            returnValue: <_i3.Student>[],
          )
          as List<_i3.Student>);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> loadStudents(int? classId) =>
      (super.noSuchMethod(
            Invocation.method(#loadStudents, [classId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> selectStudent(int? studentId) =>
      (super.noSuchMethod(
            Invocation.method(#selectStudent, [studentId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> addStudent(int? classId, String? name, String? rollNumber) =>
      (super.noSuchMethod(
            Invocation.method(#addStudent, [classId, name, rollNumber]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> updateStudent(_i3.Student? student) =>
      (super.noSuchMethod(
            Invocation.method(#updateStudent, [student]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> deleteStudent(int? studentId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteStudent, [studentId]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  void clearError() => super.noSuchMethod(
    Invocation.method(#clearError, []),
    returnValueForMissingStub: null,
  );

  @override
  void clearSelectedStudent() => super.noSuchMethod(
    Invocation.method(#clearSelectedStudent, []),
    returnValueForMissingStub: null,
  );

  @override
  void clearCache() => super.noSuchMethod(
    Invocation.method(#clearCache, []),
    returnValueForMissingStub: null,
  );

  @override
  void invalidateAttendanceCache(int? classId) => super.noSuchMethod(
    Invocation.method(#invalidateAttendanceCache, [classId]),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<void> refreshAttendanceStats(int? classId) =>
      (super.noSuchMethod(
            Invocation.method(#refreshAttendanceStats, [classId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [AttendanceProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockAttendanceProvider extends _i1.Mock
    implements _i7.AttendanceProvider {
  MockAttendanceProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.AttendanceSession> get sessions =>
      (super.noSuchMethod(
            Invocation.getter(#sessions),
            returnValue: <_i3.AttendanceSession>[],
          )
          as List<_i3.AttendanceSession>);

  @override
  List<_i3.AttendanceRecord> get records =>
      (super.noSuchMethod(
            Invocation.getter(#records),
            returnValue: <_i3.AttendanceRecord>[],
          )
          as List<_i3.AttendanceRecord>);

  @override
  List<Map<String, dynamic>> get attendanceWithStudentInfo =>
      (super.noSuchMethod(
            Invocation.getter(#attendanceWithStudentInfo),
            returnValue: <Map<String, dynamic>>[],
          )
          as List<Map<String, dynamic>>);

  @override
  bool get isLoading =>
      (super.noSuchMethod(Invocation.getter(#isLoading), returnValue: false)
          as bool);

  @override
  set onAttendanceUpdated(void Function(int)? _onAttendanceUpdated) =>
      super.noSuchMethod(
        Invocation.setter(#onAttendanceUpdated, _onAttendanceUpdated),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> loadSessions(int? classId) =>
      (super.noSuchMethod(
            Invocation.method(#loadSessions, [classId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i3.AttendanceSession?> createOrGetSession(
    int? classId,
    DateTime? date,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createOrGetSession, [classId, date]),
            returnValue: _i4.Future<_i3.AttendanceSession?>.value(),
          )
          as _i4.Future<_i3.AttendanceSession?>);

  @override
  _i4.Future<void> selectSession(int? sessionId) =>
      (super.noSuchMethod(
            Invocation.method(#selectSession, [sessionId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> loadAttendanceRecords(int? sessionId) =>
      (super.noSuchMethod(
            Invocation.method(#loadAttendanceRecords, [sessionId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> saveAttendanceRecords(
    int? sessionId,
    List<_i3.AttendanceRecord>? records,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#saveAttendanceRecords, [sessionId, records]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> updateAttendanceRecord(_i3.AttendanceRecord? record) =>
      (super.noSuchMethod(
            Invocation.method(#updateAttendanceRecord, [record]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> deleteSession(int? sessionId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteSession, [sessionId]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<List<Map<String, dynamic>>> getStudentAttendance(int? studentId) =>
      (super.noSuchMethod(
            Invocation.method(#getStudentAttendance, [studentId]),
            returnValue: _i4.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i4.Future<List<Map<String, dynamic>>>);

  @override
  void clearError() => super.noSuchMethod(
    Invocation.method(#clearError, []),
    returnValueForMissingStub: null,
  );

  @override
  void clearSelectedSession() => super.noSuchMethod(
    Invocation.method(#clearSelectedSession, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyAttendanceUpdated(int? classId) => super.noSuchMethod(
    Invocation.method(#notifyAttendanceUpdated, [classId]),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i8.NavigationService {
  MockNavigationService() {
    _i1.throwOnMissingStub(this);
  }
}
